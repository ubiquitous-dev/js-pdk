/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/absolute-redirect/{n}": {
    /** Absolutely 302 Redirects n times. */
    get: {
      parameters: {
        path: {
          n: unknown;
        };
      };
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
  };
  "/anything": {
    /** Returns anything passed in request data. */
    get: {
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    put: {
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    post: {
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    delete: {
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    patch: {
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/anything/{anything}": {
    /** Returns anything passed in request data. */
    get: {
      parameters: {
        path: {
          /** @description anything */
          anything: Record<string, never>;
        };
      };
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    put: {
      parameters: {
        path: {
          /** @description anything */
          anything: Record<string, never>;
        };
      };
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    post: {
      parameters: {
        path: {
          /** @description anything */
          anything: Record<string, never>;
        };
      };
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    delete: {
      parameters: {
        path: {
          /** @description anything */
          anything: Record<string, never>;
        };
      };
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns anything passed in request data. */
    patch: {
      parameters: {
        path: {
          /** @description anything */
          anything: Record<string, never>;
        };
      };
      responses: {
        /** @description Anything passed in request */
        200: {
          content: {
          };
        };
      };
    };
    parameters: {
      path: {
        /** @description anything */
        anything: Record<string, never>;
      };
    };
  };
  "/base64/{value}": {
    /** Decodes base64url-encoded string. */
    get: {
      parameters: {
        path: {
          value: string;
        };
      };
      responses: {
        /** @description Decoded base64 content. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/basic-auth/{user}/{passwd}": {
    /** Prompts the user for authorization using HTTP Basic Auth. */
    get: {
      parameters: {
        path: {
          user: string;
          passwd: string;
        };
      };
      responses: {
        /** @description Sucessful authentication. */
        200: {
          content: {
          };
        };
        /** @description Unsuccessful authentication. */
        401: {
          content: {
          };
        };
      };
    };
  };
  "/bearer": {
    /** Prompts the user for authorization using bearer authentication. */
    get: {
      parameters: {
        header?: {
          Authorization?: unknown;
        };
      };
      responses: {
        /** @description Sucessful authentication. */
        200: {
          content: {
          };
        };
        /** @description Unsuccessful authentication. */
        401: {
          content: {
          };
        };
      };
    };
  };
  "/brotli": {
    /** Returns Brotli-encoded data. */
    get: {
      responses: {
        /** @description Brotli-encoded data. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/bytes/{n}": {
    /** Returns n random bytes generated with given seed */
    get: {
      parameters: {
        path: {
          n: unknown;
        };
      };
      responses: {
        /** @description Bytes. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/cache": {
    /** Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise. */
    get: {
      parameters: {
        header?: {
          "If-Modified-Since"?: unknown;
          "If-None-Match"?: unknown;
        };
      };
      responses: {
        /** @description Cached response */
        200: {
          content: {
          };
        };
        /** @description Modified */
        304: {
          content: {
          };
        };
      };
    };
  };
  "/cache/{value}": {
    /** Sets a Cache-Control header for n seconds. */
    get: {
      parameters: {
        path: {
          value: number;
        };
      };
      responses: {
        /** @description Cache control set */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/cookies": {
    /** Returns cookie data. */
    get: {
      responses: {
        /** @description Set cookies. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/cookies/delete": {
    /** Deletes cookie(s) as provided by the query string and redirects to cookie list. */
    get: {
      parameters: {
        query?: {
          freeform?: unknown;
        };
      };
      responses: {
        /** @description Redirect to cookie list */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/cookies/set": {
    /** Sets cookie(s) as provided by the query string and redirects to cookie list. */
    get: {
      parameters: {
        query?: {
          freeform?: unknown;
        };
      };
      responses: {
        /** @description Redirect to cookie list */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/cookies/set/{name}/{value}": {
    /** Sets a cookie and redirects to cookie list. */
    get: {
      parameters: {
        path: {
          name: string;
          value: string;
        };
      };
      responses: {
        /** @description Set cookies and redirects to cookie list. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/deflate": {
    /** Returns Deflate-encoded data. */
    get: {
      responses: {
        /** @description Defalte-encoded data. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/delay/{delay}": {
    /** Returns a delayed response (max of 10 seconds). */
    get: {
      parameters: {
        path: {
          delay: unknown;
        };
      };
      responses: {
        /** @description A delayed response. */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns a delayed response (max of 10 seconds). */
    put: {
      parameters: {
        path: {
          delay: unknown;
        };
      };
      responses: {
        /** @description A delayed response. */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns a delayed response (max of 10 seconds). */
    post: {
      parameters: {
        path: {
          delay: unknown;
        };
      };
      responses: {
        /** @description A delayed response. */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns a delayed response (max of 10 seconds). */
    delete: {
      parameters: {
        path: {
          delay: unknown;
        };
      };
      responses: {
        /** @description A delayed response. */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns a delayed response (max of 10 seconds). */
    patch: {
      parameters: {
        path: {
          delay: unknown;
        };
      };
      responses: {
        /** @description A delayed response. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/delete": {
    /** The request's DELETE parameters. */
    delete: {
      responses: {
        /** @description The request's DELETE parameters. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/deny": {
    /** Returns page denied by robots.txt rules. */
    get: {
      responses: {
        /** @description Denied message */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/digest-auth/{qop}/{user}/{passwd}": {
    /** Prompts the user for authorization using Digest Auth. */
    get: {
      parameters: {
        path: {
          /** @description auth or auth-int */
          qop: string;
          user: string;
          passwd: string;
        };
      };
      responses: {
        /** @description Sucessful authentication. */
        200: {
          content: {
          };
        };
        /** @description Unsuccessful authentication. */
        401: {
          content: {
          };
        };
      };
    };
  };
  "/digest-auth/{qop}/{user}/{passwd}/{algorithm}": {
    /** Prompts the user for authorization using Digest Auth + Algorithm. */
    get: {
      parameters: {
        path: {
          /** @description auth or auth-int */
          qop: string;
          user: string;
          passwd: string;
          /** @description MD5, SHA-256, SHA-512 */
          algorithm: string;
        };
      };
      responses: {
        /** @description Sucessful authentication. */
        200: {
          content: {
          };
        };
        /** @description Unsuccessful authentication. */
        401: {
          content: {
          };
        };
      };
    };
  };
  "/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}": {
    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * @description allow settings the stale_after argument.
     */
    get: {
      parameters: {
        path: {
          /** @description auth or auth-int */
          qop: string;
          user: string;
          passwd: string;
          /** @description MD5, SHA-256, SHA-512 */
          algorithm: string;
          stale_after: string;
        };
      };
      responses: {
        /** @description Sucessful authentication. */
        200: {
          content: {
          };
        };
        /** @description Unsuccessful authentication. */
        401: {
          content: {
          };
        };
      };
    };
  };
  "/drip": {
    /** Drips data over a duration after an optional initial delay. */
    get: {
      parameters: {
        query?: {
          /** @description The amount of time (in seconds) over which to drip each byte */
          duration?: number;
          /** @description The number of bytes to respond with */
          numbytes?: number;
          /** @description The response code that will be returned */
          code?: number;
          /** @description The amount of time (in seconds) to delay before responding */
          delay?: number;
        };
      };
      responses: {
        /** @description A dripped response. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/encoding/utf8": {
    /** Returns a UTF-8 encoded body. */
    get: {
      responses: {
        /** @description Encoded UTF-8 content. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/etag/{etag}": {
    /** Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately. */
    get: {
      parameters: {
        header?: {
          "If-None-Match"?: unknown;
          "If-Match"?: unknown;
        };
        path: {
          /** @description etag */
          etag: string;
        };
      };
      responses: {
        /** @description Normal response */
        200: {
          content: {
          };
        };
        /** @description match */
        412: {
          content: {
          };
        };
      };
    };
    parameters: {
      path: {
        /** @description etag */
        etag: string;
      };
    };
  };
  "/get": {
    /** The request's query parameters. */
    get: {
      responses: {
        /** @description The request's query parameters. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/gzip": {
    /** Returns GZip-encoded data. */
    get: {
      responses: {
        /** @description GZip-encoded data. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/headers": {
    /** Return the incoming request's HTTP headers. */
    get: {
      responses: {
        /** @description The request's headers. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/hidden-basic-auth/{user}/{passwd}": {
    /** Prompts the user for authorization using HTTP Basic Auth. */
    get: {
      parameters: {
        path: {
          user: string;
          passwd: string;
        };
      };
      responses: {
        /** @description Sucessful authentication. */
        200: {
          content: {
          };
        };
        /** @description Unsuccessful authentication. */
        404: {
          content: {
          };
        };
      };
    };
  };
  "/html": {
    /** Returns a simple HTML document. */
    get: {
      responses: {
        /** @description An HTML page. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/image": {
    /** Returns a simple image of the type suggest by the Accept header. */
    get: {
      responses: {
        /** @description An image. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/image/jpeg": {
    /** Returns a simple JPEG image. */
    get: {
      responses: {
        /** @description A JPEG image. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/image/png": {
    /** Returns a simple PNG image. */
    get: {
      responses: {
        /** @description A PNG image. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/image/svg": {
    /** Returns a simple SVG image. */
    get: {
      responses: {
        /** @description An SVG image. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/image/webp": {
    /** Returns a simple WEBP image. */
    get: {
      responses: {
        /** @description A WEBP image. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/ip": {
    /** Returns the requester's IP Address. */
    get: {
      responses: {
        /** @description The Requester's IP Address. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/json": {
    /** Returns a simple JSON document. */
    get: {
      responses: {
        /** @description An JSON document. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/links/{n}/{offset}": {
    /** Generate a page containing n links to other pages which do the same. */
    get: {
      parameters: {
        path: {
          n: unknown;
          offset: unknown;
        };
      };
      responses: {
        /** @description HTML links. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/patch": {
    /** The request's PATCH parameters. */
    patch: {
      responses: {
        /** @description The request's PATCH parameters. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/post": {
    /** The request's POST parameters. */
    post: {
      responses: {
        /** @description The request's POST parameters. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/put": {
    /** The request's PUT parameters. */
    put: {
      responses: {
        /** @description The request's PUT parameters. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/range/{numbytes}": {
    /** Streams n random bytes generated with given seed, at given chunk size per packet. */
    get: {
      parameters: {
        path: {
          numbytes: unknown;
        };
      };
      responses: {
        /** @description Bytes. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/redirect-to": {
    /** 302/3XX Redirects to the given URL. */
    get: {
      parameters: {
        query: {
          url: string;
          status_code?: unknown;
        };
      };
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
    /** 302/3XX Redirects to the given URL. */
    put: {
      requestBody: {
        content: {
          "multipart/form-data": {
            url: string;
            status_code?: unknown;
          };
        };
      };
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
    /** 302/3XX Redirects to the given URL. */
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            url: string;
            status_code?: unknown;
          };
        };
      };
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
    /** 302/3XX Redirects to the given URL. */
    delete: {
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
    /** 302/3XX Redirects to the given URL. */
    patch: {
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
  };
  "/redirect/{n}": {
    /** 302 Redirects n times. */
    get: {
      parameters: {
        path: {
          n: unknown;
        };
      };
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
  };
  "/relative-redirect/{n}": {
    /** Relatively 302 Redirects n times. */
    get: {
      parameters: {
        path: {
          n: unknown;
        };
      };
      responses: {
        /** @description A redirection. */
        302: {
          content: {
          };
        };
      };
    };
  };
  "/response-headers": {
    /** Returns a set of response headers from the query string. */
    get: {
      parameters: {
        query?: {
          freeform?: unknown;
        };
      };
      responses: {
        /** @description Response headers */
        200: {
          content: {
          };
        };
      };
    };
    /** Returns a set of response headers from the query string. */
    post: {
      parameters: {
        query?: {
          freeform?: unknown;
        };
      };
      responses: {
        /** @description Response headers */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/robots.txt": {
    /** Returns some robots.txt rules. */
    get: {
      responses: {
        /** @description Robots file */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/status/{codes}": {
    /** Return status code or random status code if more than one are given */
    get: {
      parameters: {
        path: {
          codes: unknown;
        };
      };
      responses: {
        /** @description Informational responses */
        100: {
          content: {
          };
        };
        /** @description Success */
        200: {
          content: {
          };
        };
        /** @description Redirection */
        300: {
          content: {
          };
        };
        /** @description Client Errors */
        400: {
          content: {
          };
        };
        /** @description Server Errors */
        500: {
          content: {
          };
        };
      };
    };
    /** Return status code or random status code if more than one are given */
    put: {
      parameters: {
        path: {
          codes: unknown;
        };
      };
      responses: {
        /** @description Informational responses */
        100: {
          content: {
          };
        };
        /** @description Success */
        200: {
          content: {
          };
        };
        /** @description Redirection */
        300: {
          content: {
          };
        };
        /** @description Client Errors */
        400: {
          content: {
          };
        };
        /** @description Server Errors */
        500: {
          content: {
          };
        };
      };
    };
    /** Return status code or random status code if more than one are given */
    post: {
      parameters: {
        path: {
          codes: unknown;
        };
      };
      responses: {
        /** @description Informational responses */
        100: {
          content: {
          };
        };
        /** @description Success */
        200: {
          content: {
          };
        };
        /** @description Redirection */
        300: {
          content: {
          };
        };
        /** @description Client Errors */
        400: {
          content: {
          };
        };
        /** @description Server Errors */
        500: {
          content: {
          };
        };
      };
    };
    /** Return status code or random status code if more than one are given */
    delete: {
      parameters: {
        path: {
          codes: unknown;
        };
      };
      responses: {
        /** @description Informational responses */
        100: {
          content: {
          };
        };
        /** @description Success */
        200: {
          content: {
          };
        };
        /** @description Redirection */
        300: {
          content: {
          };
        };
        /** @description Client Errors */
        400: {
          content: {
          };
        };
        /** @description Server Errors */
        500: {
          content: {
          };
        };
      };
    };
    /** Return status code or random status code if more than one are given */
    patch: {
      parameters: {
        path: {
          codes: unknown;
        };
      };
      responses: {
        /** @description Informational responses */
        100: {
          content: {
          };
        };
        /** @description Success */
        200: {
          content: {
          };
        };
        /** @description Redirection */
        300: {
          content: {
          };
        };
        /** @description Client Errors */
        400: {
          content: {
          };
        };
        /** @description Server Errors */
        500: {
          content: {
          };
        };
      };
    };
  };
  "/stream-bytes/{n}": {
    /** Streams n random bytes generated with given seed, at given chunk size per packet. */
    get: {
      parameters: {
        path: {
          n: unknown;
        };
      };
      responses: {
        /** @description Bytes. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/stream/{n}": {
    /** Stream n JSON responses */
    get: {
      parameters: {
        path: {
          n: unknown;
        };
      };
      responses: {
        /** @description Streamed JSON responses. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/user-agent": {
    /** Return the incoming requests's User-Agent header. */
    get: {
      responses: {
        /** @description The request's User-Agent header. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/uuid": {
    /** Return a UUID4. */
    get: {
      responses: {
        /** @description A UUID4. */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/xml": {
    /** Returns a simple XML document. */
    get: {
      responses: {
        /** @description An XML document. */
        200: {
          content: {
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
